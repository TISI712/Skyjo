import streamlit as st
from random import shuffle, choice
import time

# --- Card Setup ---
CARD_VALUES = [-2]*5 + [-1]*10 + [0]*15 + [1]*10 + [2]*10 + [3]*10 + [4]*10 + [5]*10 + [6]*10 + [7]*10 + [8]*10 + [9]*10 + [10]*5
shuffle(CARD_VALUES)

# --- Helper Functions ---
def get_card_color(value):
    if value in [-2, -1]:
        return "#8B5CF6"  # purple
    elif value == 0:
        return "#60A5FA"  # blue
    elif value == 1:
        return "#A7F3D0"  # light green
    elif 2 <= value <= 4:
        return "#4ADE80"  # green
    elif 5 <= value <= 8:
        return "#FACC15"  # yellow
    else:
        return "#F87171"  # red

def init_grid(deck):
    return [[{'value': deck.pop(), 'revealed': False} for _ in range(4)] for _ in range(3)]

def all_revealed(grid):
    return all(card['revealed'] for row in grid for card in row)

def calculate_score(grid):
    return sum(card['value'] for row in grid for card in row if card['revealed'])

# --- Session State Init ---
if 'draw_pile' not in st.session_state:
    st.session_state.draw_pile = CARD_VALUES[:-1]
    st.session_state.discard_pile = [CARD_VALUES[-1]]
    st.session_state.user_grid = init_grid(st.session_state.draw_pile)
    st.session_state.comp_grid = init_grid(st.session_state.draw_pile)
    st.session_state.user_turn = True
    st.session_state.selected_card = None
    st.session_state.selected_pos = None
    st.session_state.game_over = False
    st.session_state.show_tutorial = True
    st.session_state.user_score = 0
    st.session_state.comp_score = 0

# --- Title ---
st.title("üéØ Skyjo - Two Player Game")

# --- Turn Indicator ---
if not st.session_state.game_over:
    turn_text = "üü¢ Your Turn" if st.session_state.user_turn else "ü§ñ Computer's Turn"
    st.markdown(f"<h4 style='text-align:center; color:#333;'>{turn_text}</h4>", unsafe_allow_html=True)

# --- Tutorial Message ---
if st.session_state.show_tutorial:
    with st.expander("üìò How to Play (click to expand)"):
        st.markdown("""
        - You and the computer each have 12 cards, face-down.
        - Click a ‚ùì to reveal a card on your grid.
        - Or draw a card and choose to swap it with a card on your grid.
        - The replaced card will go to the discard pile.
        - The computer plays randomly after your move.
        - Game ends when all your cards are revealed.
        """)

# --- Game End Check ---
if all_revealed(st.session_state.user_grid):
    st.session_state.game_over = True
    st.session_state.user_score = calculate_score(st.session_state.user_grid)
    st.session_state.comp_score = calculate_score(st.session_state.comp_grid)
    st.success("üéâ Game Over! You've revealed all your cards!")
    time.sleep(0.5)
    st.balloons()
    with st.expander("üìä Final Scores"):
        st.markdown(f"**Your Score:** {st.session_state.user_score}")
        st.markdown(f"**Computer Score:** {st.session_state.comp_score}")
        if st.session_state.user_score < st.session_state.comp_score:
            st.success("You win! üéâ")
        elif st.session_state.user_score > st.session_state.comp_score:
            st.warning("Computer wins! ü§ñ")
        else:
            st.info("It's a tie! üü∞")

# --- Draw/Discard UI ---
if not st.session_state.game_over:
    st.subheader("Draw and Discard Piles")
    col1, col2 = st.columns(2)
    with col1:
        if st.button("Draw Card", help="Draw a new card from the pile"):
            if st.session_state.draw_pile:
                st.session_state.selected_card = st.session_state.draw_pile.pop()
                st.session_state.user_turn = True
    with col2:
        st.write(f"Top Discard: {st.session_state.discard_pile[-1]}")
        if st.button("Take Discard", help="Take the top card from discard pile"):
            st.session_state.selected_card = st.session_state.discard_pile.pop()
            st.session_state.user_turn = True
    st.write(f"Selected Card: {st.session_state.selected_card}")

# --- Player Grid ---
st.subheader("Your Grid (4x3)")
for row in range(3):
    cols = st.columns(4)
    for col in range(4):
        card = st.session_state.user_grid[row][col]
        key = f"user_{row}_{col}"
        if card['revealed']:
            color = get_card_color(card['value'])
            cols[col].markdown(f"<div style='background-color:{color}; padding:12px; text-align:center; border-radius:10px;'><strong>{card['value']}</strong></div>", unsafe_allow_html=True)
        else:
            if st.session_state.selected_card is None:
                if not st.session_state.game_over:
                    if cols[col].button("‚ùì", key=key, help="Click to reveal this card"):
                        card['revealed'] = True
                        st.session_state.user_turn = False
            else:
                if cols[col].button("Swap", key=key, help="Click to swap with drawn card"):
                    st.session_state.discard_pile.append(card['value'])
                    card['value'] = st.session_state.selected_card
                    card['revealed'] = True
                    st.session_state.selected_card = None
                    st.session_state.user_turn = False
                    st.rerun()

# --- Computer Random Turn ---
if not st.session_state.user_turn and not st.session_state.game_over and st.session_state.selected_card is None:
    time.sleep(0.5)
    choice_action = choice(['draw', 'discard', 'flip'])
    if choice_action == 'draw' and st.session_state.draw_pile:
        _ = st.session_state.draw_pile.pop()
    elif choice_action == 'discard' and st.session_state.discard_pile:
        _ = st.session_state.discard_pile[-1]
    else:
        hidden = [(r, c) for r in range(3) for c in range(4) if not st.session_state.comp_grid[r][c]['revealed']]
        if hidden:
            r, c = choice(hidden)
            st.session_state.comp_grid[r][c]['revealed'] = True
    st.session_state.user_turn = True

# --- Restart Button ---
if st.button("üîÅ Restart Game"):
    shuffle(CARD_VALUES)
    st.session_state.draw_pile = CARD_VALUES[:-1]
    st.session_state.discard_pile = [CARD_VALUES[-1]]
    st.session_state.user_grid = init_grid(st.session_state.draw_pile)
    st.session_state.comp_grid = init_grid(st.session_state.draw_pile)
    st.session_state.user_turn = True
    st.session_state.selected_card = None
    st.session_state.selected_pos = None
    st.session_state.game_over = False
    st.session_state.user_score = 0
    st.session_state.comp_score = 0
    st.session_state.show_tutorial = False
    st.rerun()
